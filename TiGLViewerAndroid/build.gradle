buildscript {
        repositories {
                mavenCentral()
        }
        dependencies {
                classpath 'com.android.tools.build:gradle:0.9.+'
        }
}

apply plugin: 'android'

repositories {
    mavenCentral()
}

android {

    compileSdkVersion 19
    buildToolsVersion "19.0.3"

    defaultConfig{
        versionName "1.2"
        versionCode 7
    }
    // make code to 3-digits code: 5 -> 005 (required for architecture prefixing)
    def versionCodeString = String.format('%03d', defaultConfig.versionCode)

    sourceSets {
            main {
                    manifest.srcFile 'AndroidManifest.xml'
                    java.srcDir 'src'
                    res.srcDir 'res'
                    assets.srcDir 'assets'
                    resources.srcDir 'src'
                    aidl.srcDir 'src'
                    jniLibs.srcDir 'libs'
            }
    }
          
    // the defines how to trigger ndk-build to create tiglviewer-native.so
    task ndkBuild(type: Exec) {
        def ndkBuild;
        def hasNdk = false;
        if (System.env.ANDROID_NDK_HOME != null) {
            hasNdk = true;
            if (System.properties['os.name'].toLowerCase().contains('windows')) {
                ndkBuild = new File(System.env.ANDROID_NDK_HOME, 'ndk-build.cmd')
            } else {
                ndkBuild = new File(System.env.ANDROID_NDK_HOME, 'ndk-build')
            }
        }

        doFirst {
            if (!hasNdk) {
                logger.error('##################')
                logger.error("Failed NDK build")
                logger.error('Reason: Reason: ANDROID_NDK_HOME not set.')
                logger.error('##################')
            }
            assert hasNdk : "ANDROID_NDK_HOME not set."
        }

        commandLine ndkBuild, '-j', Runtime.runtime.availableProcessors()
    }

    task cleanNative(type: Exec) {
        def ndkBuild;
        def hasNdk = false;
        if (System.env.ANDROID_NDK_HOME != null) {
            hasNdk = true;
            if (System.properties['os.name'].toLowerCase().contains('windows')) {
                ndkBuild = new File(System.env.ANDROID_NDK_HOME, 'ndk-build.cmd')
            } else {
                ndkBuild = new File(System.env.ANDROID_NDK_HOME, 'ndk-build')
            }      
        }

        commandLine ndkBuild, "clean", "-j1"

        doFirst {
            if (!hasNdk) {
                logger.error('##################')
                logger.error("Failed NDK build")
                logger.error('Reason: Reason: ANDROID_NDK_HOME not set.')
                logger.error('##################')
            }
            assert hasNdk : "ANDROID_NDK_HOME not set."
        }
    }

    tasks.withType(Compile) {
        compileTask -> compileTask.dependsOn ndkBuild
    }

    clean.dependsOn 'cleanNative'

    productFlavors {
        x86 {
            versionCode Integer.parseInt("6" + versionCodeString)
            ndk {
                abiFilter "x86"
            }
        }
        armv7 {
            versionCode Integer.parseInt("2" + versionCodeString)
            ndk {
                abiFilter "armeabi-v7a"
            }
        }
        arm {
            versionCode Integer.parseInt("1" + versionCodeString)
            ndk {
                abiFilter "armeabi"
            }
        }
        fat
    }
}

// apply signing configuration
if(project.hasProperty("TiGLViewerApp.signing") && new File(project.property("TiGLViewerApp.signing") + ".gradle").exists()) {
    apply from: project.property("TiGLViewerApp.signing") + ".gradle";
}

dependencies {
    compile 'com.android.support:support-v4:18.+'
    compile 'com.android.support:appcompat-v7:18.+'
}
